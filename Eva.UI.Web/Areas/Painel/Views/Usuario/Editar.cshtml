@using Eva.Dominio
@model Eva.UI.Web.Areas.Painel.Controllers.UsuarioViewModel

<div class="col-md-12">
    <!--breadcrumbs start -->
    <ul class="breadcrumb">
        <li><a href="@Url.Action("Index", "Home", new { Area = "Painel" })"><i class="fa fa-home"></i> Inicio</a></li>
        <li><a href="@Url.Action("Index", "Usuario", new { Area = "Painel" })"><i class="fa fa-home"></i> Usuários</a></li>
        <li class="active">Editar</li>
    </ul>
    <!--breadcrumbs end -->
</div>

<div class="col-lg-12">
    <section class="panel">
        <header class="panel-heading">
            @(string.IsNullOrEmpty(Model.Id) ? "Cadastrar novo usuário" : "Editar usuário: " + Model.Nome)
        </header>
        <div class="panel-body">
            <div>
                <form class="cmxform form-horizontal " id="usuarioForm" method="POST" action="" novalidate="novalidate" enctype="multipart/form-data">

                    <div class="form-group ">
                        <label for="Nome" class="control-label col-lg-3">Nome:</label>
                        <div class="col-lg-6">
                            <input class=" form-control" id="Nome" name="Nome" type="text" value="@Model.Nome" required="">
                            <label for="Nome" class="error">@Html.ValidationMessageFor(x => x.Nome)</label>
                        </div>
                    </div>

                    <div class="form-group ">
                        <label for="Email" class="control-label col-lg-3">Email:</label>
                        <div class="col-lg-6">
                            <input class="form-control " id="Email" type="email" name="Email"  value="@Model.Email" required="">
                            <label for="Email" class="error">@Html.ValidationMessageFor(x => x.Email)</label>
                        </div>
                    </div>

                    <div class="form-group ">
                        <label for="GrupoId" class="control-label col-lg-3">Grupo:</label>
                        <div class="col-lg-6">
                            <select name="GrupoId" id="GrupoId" class="form-control">
                                @foreach (var grupo in (List<GrupoDeUsuario>) ViewBag.Grupos)
                                {
                                    var selected = "";
                                    if (grupo.Id == Model.GrupoId)
                                    {
                                        selected = "selected";
                                    }

                                    <option value='@grupo.Id' @selected>@grupo.Nome</option>
                                    
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group ">
                        <label for="Senha" class="control-label col-lg-3">Senha:</label>
                        <div class="col-lg-6">
                            <input class="form-control " id="Senha" type="password" name="Senha" >
                            <label for="Senha" class="error">@Html.ValidationMessageFor(x => x.Senha)</label>
                        </div>
                    </div>
                    <div class="form-group ">
                        <label for="ConfirmarSenha" class="control-label col-lg-3">Confirmar Senha:</label>
                        <div class="col-lg-6">
                            <input class="form-control " id="ConfirmarSenha" type="password" name="ConfirmarSenha" >
                            <label for="ConfirmarSenha" class="error">@Html.ValidationMessageFor(x => x.ConfirmarSenha)</label>
                        </div>
                    </div>

                    <div class="form-group last">
                        <label class="control-label col-lg-3">Foto:</label>
                        <div class="col-md-9">
                            <div class="fileupload fileupload-new" data-provides="fileupload">
                                <input type="hidden" value="" name="">

                                <div class="fileupload-new thumbnail" style="width: 200px; height: 150px;">
                                    <img src="@Foto.Placehold(Model.PathFoto, "200x150", "Usuario/")" alt="">
                                    <input type="hidden" value="@Model.PathFoto" name="PathFoto" id="PathFoto" />
                                </div>
                                <div class="fileupload-preview fileupload-exists thumbnail" style="max-width: 200px; max-height: 150px; line-height: 10px;"></div>
                                <div>
                                    <span class="btn btn-white btn-file">
                                        <span class="fileupload-new"><i class="fa fa-paper-clip"></i> Selecionar Foto</span>
                                        <span class="fileupload-exists"><i class="fa fa-undo"></i> Alterar</span>
                                        <input type="file" class="default" name="Foto" id="Foto">
                                    </span>
                                    <a href="#" class="btn btn-danger fileupload-exists" data-dismiss="fileupload"><i class="fa fa-trash"></i> Remover</a>

                                </div>
                                <label for="PathFoto" class="error">@Html.ValidationMessageFor(x => x.PathFoto)</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-lg-offset-3 col-lg-6">
                            <button class="btn btn-primary" type="submit">Salvar</button>
                            <a href="@Url.Action("Index")" class="btn btn-default">Cancelar</a>
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </section>
</div>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script type="text/javascript" src="~/Scripts/bootstrap-fileupload.js"></script>

<script type="text/javascript">
     $("#usuarioForm").validate({
         rules:{
             Nome:{
                 required: true,
                 minlength: 3
             },
             ConfirmarSenha: {
                 equalTo: "#Senha"
             },
         },
         messages:{
             Nome:{
                 required: "O campo nome é obrigatorio.",
                 minlength: "O campo nome deve conter no mínimo 3 caracteres."
             },
             Email: {
                 required: "O campo email é obrigatorio.",
                 email: "O campo email deve conter um email válido."
             },
             Senha: {
                 required: "O campo senha é obrigatorio."
             },
             ConfirmarSenha: {
                 required: "O campo confirmação de senha é obrigatorio.",
                 equalTo: "O campo confirmação de senha deve ser identico ao campo senha."
             },
         }

     });
</script>
